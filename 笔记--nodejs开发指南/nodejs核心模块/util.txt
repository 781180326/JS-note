
  util模块：require('util');

1、util.inherits

      util.inherits( constructor, superConstructor );

      使constructor继承superConstructor的原型。
      仅仅继承原型中定义的函数，而函数内部的属性并不会被继承。

      自己实现：
        function Util(){ }

        Util.prototype.inherits = function( constructor, superConstructor ){

            var obj = Object.creat( superConstructor );

            constructor.prototype = obj;

            obj.constructor = constructor;

            return constructor;
        }

        使用:
          var util = require('util');

          function Base(){
            this.name = 'base';
            this.base = 1991;
            this.sayHello = function(){
              console.log('hello' + this.name);
            }
          }

          Base.prototype.showName(){
            console.log(this.name);
          }

          function Sub(){
            this.name = 'sub';
          }

          util.inherits( Sub, Base );

          var objSub = new Sub();
          objSub.showName();
          console.log(objSub);

2、util.inspect

        util.inspect( object, [showhidden], [depth], [colors] );

        将任意一个对象转换为字符串，通常用于调试和错误输出。

          object，必填，即要转换的对象。
          showhidden，可选，是否输出更多的隐藏信息，true为是。
          depth，可选，表示最大递归的层数，默认递归2层，指定为null时表示不限递归层数完整遍历对象。
          colors，可选，是否在终端对输出格式使用颜色编码，true为是。

        util.inspect并不会简单的直接把对象转换为字符串，它不会调用对象的toString会者valueOf方法。

          var util = require('util');

          function Person(){
            this.name = 'byviod';
            this.toString = function(){
              return this.name;
            }
          }

          var obj = new Person();

          console.log( util.inspect(obj) );
          console.log( util.inspect(obj, true, null, true) );

          // Person { name: 'byviod', toString: [Function] }
          // undefined

          //  Person {
          //    name: 'byviod',
          //    toString:
          //     { [Function]
          //       [length]: 0,
          //       [name]: '',
          //       [arguments]: null,
          //       [caller]: null,
          //       [prototype]: { [constructor]: [Circular] } } }
          //  undefined
