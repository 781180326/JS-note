
    1、模块的类型
        可分为两大类：核心模块 、 文件模块

        ①核心模块：
            Nodejs标准API中提供的模块，比如：fs、http、url、queryString等，都是由 Nodejs 官方提供的模块，编译成了二进制代码。

            我们可以直接通过 require('fs') 这样的形式 获取核心模块。

            核心模块拥有最高的加载优先级，如果有模块与其命名冲突，Nodejs总会加载核心模块。

        ②文件模块：
            存储为单独的文件或者文件夹的模块。

            可能是JavaScript代码、JSON 或者 编译好的 C/C++ 代码。

            在不显式指定文件模块扩展名的时候，Nodejs会按优先级试图为其加上.js(JS代码)、.json(JSON文本)、.node(编译好的C/C++代码)的扩展名。

            文件模块的加载有两种方式：按路径加载、 查找node_modules文件夹
                一、按路径加载：
                    1、require参数以 '/' 开头， 就是以绝对路径的方式查找模块名称。例如 require('/home/mod/void')，将会按照优先级依次尝试加载 /home/mod/void.js、 /home/mod/void.json、 /home/mod/void.node。

                    2、require参数以 './' 或 '../' 开头，就是以相对路径的方式查找模块，这种方式也是最常见的。并且也是按照优先级尝试为其加上后缀扩展名。

                二、查找node_modules文件夹


                    使用npm install 的包通常就是以这种方式加载的。

                    npm install:
                        我们使用 npm install 包名 安装一个包，install原则是找到存在package.json所在的根目录并自动创建node_modules文件夹，或存在node_modules的目录，并在node_modules中安装，如果没有package.json和node_modules目录，会向上寻找符合条件的目录，甚至到默认的全局目录。

                        所以如果我们需要将 包 安装到 当前目录下的node_modules中，我们可以这样：
                            1、在当前目录下建立package.json文件,并至少设置一个属性，将其变为一个真正的json文件，在安装后也会更新package.json文件；
                            2、直接在当前目录下建立空的node_modules文件夹。

                    在node_modules目录的外面一层，我们可以直接使用 require('express') 来代替 require('./node_modules/express')。

                    如果require参数不以 '/'、 './'、 '../'开头， 并且该模块又不是核心模块， 那么就要通过查找node_modules加载模块了。

                    当require的参数既不是核心模块，又不是以路径形式表示的模块名称时：
                        试图在当前目录下的 node_modules 目录中来查找是不是有这样一个模块。
                        如果没有找到，则会在当前目录的上一层中的node_modules目录中继续查找。
                        反复执行这一过程，直到遇到根目录为止。

                        举个例子：我们在 /home/byvoid/develop/foo.js 中使用 require('bar.js') 命令，Nodejs会依次查找：
                            /home/byvoid/develop/node_modules/bar.js
                            /home/byvoid/node_modules/bar.js
                            /home/node_modules/bar.js
                            /node_modules/bar.js
                            如果没有，抛出异常

                        为什么要这样做？因为通常一个工程内会有一些子目录，当子目录内的文件需要访问到工程共同依赖的模块时，就需要向父目录上溯了。比如工程的目录结构如下：
                            ↓project
                                app.js
                                ↓models
                                    ...
                                ↓views
                                    ...
                                ↓controllers
                                    index.controllers.js
                                    error.controllers.js
                                    ...
                                ↓node_modules
                                    ↓express
                        我们不仅要在 project 目录下的 app.js 中使用 require('express'),而且可能要在 controllers 目录下的 index.controllers.js 文件中也使用 require('express')，这时就需要向父目录上溯一层才能找到 node_modules 中的 express。
